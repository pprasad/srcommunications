/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.srm.swings.product;

import com.srm.services.dto.ServiceConstant;
import com.srm.services.entity.Category;
import com.srm.services.entity.CategoryProduct;
import com.srm.services.entity.ProductEntry;
import com.srm.services.rest.services.TransactionService;
import com.srm.swings.util.UIUtils;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.annotation.PostConstruct;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

/**
 *
 * @author umprasad
 */
@Component
public class ProductCategory extends javax.swing.JInternalFrame {

    private final static Logger LOGGER = LoggerFactory.getLogger(ProductCategory.class);
    private Boolean flag=Boolean.FALSE;
    /**
     * Creates new form ProductCategory
     */
    @PostConstruct
    public void init() {
        initComponents();

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        /*setting table header font size*/
        jTabbedPane3 = new javax.swing.JTabbedPane();
        setTableSettings();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        loadProductTypeDetails();
        productCateTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textFieldProductCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textFieldProductName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        productTypeBox = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryProductTable = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        productCodeJBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        textFieldCateProductName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textFieldUnitPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textFieldSalePrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textFieldTotalQty = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textFieldPurchaseAmt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtableProductEntry = new javax.swing.JTable();
        textFieldEntryDate = new com.toedter.calendar.JDateChooser();

        setClosable(true);
        setTitle("Product Settings");
        setToolTipText("");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Elephant", 0, 24)); // NOI18N

        jTabbedPane3.setBackground(new java.awt.Color(204, 204, 0));
        jTabbedPane3.setForeground(new java.awt.Color(0, 102, 102));
        jTabbedPane3.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane3.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        jTabbedPane3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N

        jPanel1.setBackground(java.awt.SystemColor.window);

        productCateTable.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        productCateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categorty Id", "Category Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /*Column Header width*/
        productCateTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        setTableSettings(productCateTable,0,300);
        setTableSettings(productCateTable,1,1024);
        productCateTable.setRowHeight(45);
        productCateTable.revalidate();
        jScrollPane2.setViewportView(productCateTable);
        UIUtils.setTableSettings(productCateTable);

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erase.png"))); // NOI18N
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1492, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(222, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Product Category", jPanel1);
        /*loading existng data*/
        loadProductCategoryDetails();

        jPanel2.setBackground(java.awt.SystemColor.window);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setText("Product Code");

        textFieldProductCode.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldProductCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldProductCodeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel2.setText("Product Name");

        textFieldProductName.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldProductNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel3.setText("Product Type");

        productTypeBox.setRenderer(new BasicComboBoxRenderer(){

            @Override
            public java.awt.Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if(value!=null){
                    Category category=(Category)value;
                    setText(category.getCateName());
                }
                return this;
            }

        });
        productTypeBox.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        categoryProductTableBox=new  javax.swing.JComboBox();
        categoryProductTableBox.setRenderer(new BasicComboBoxRenderer(){

            @Override
            public java.awt.Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if(value!=null){
                    Category category=(Category)value;
                    setText(category.getCateName());
                }
                return this;
            }

        });
        productTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productTypeBoxActionPerformed(evt);
            }
        });
        Category category=new Category();
        category.setCateName(ServiceConstant.SELECTED);
        categorys.add(0,category);
        productTypeBox.setModel(new DefaultComboBoxModel<Category>(new Vector<Category>(categorys)));
        categoryProductTableBox.setModel(new DefaultComboBoxModel<Category>(new Vector<Category>(categorys)));

        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cnr_update.png"))); // NOI18N
        jButton6.setText("Update");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        categoryProductTable.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        categoryProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Product Code", "Product Name", "Product Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        categoryProductTable.setRowHeight(45);
        categoryProductTable.getColumn ("Product Type").setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public java.awt.Component getTableCellRendererComponent
            (JTable table, Object value
                , boolean isSelected, boolean hasFocus, int row, int column

            ) {
                if (value instanceof Category) {
                    Category category = (Category) value;
                    setText(category.getCateName());
                    Font font = UIManager.getFont("TableHeader.font");
                    font = font.deriveFont(21f);
                    setFont(font);
                }
                return this;
            }

        });
        jtableProductTypeBox=new JComboBox(new Vector(categorys));
        jtableProductTypeBox.setRenderer(new BasicComboBoxRenderer(){
            @Override
            public java.awt.Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if(value!=null){
                    Category category=(Category)value;
                    setText(category.getCateName());
                }
                return this;
            }

        });
        categoryProductTable.getColumn("Product Type").setCellEditor(new DefaultCellEditor(jtableProductTypeBox));
        jScrollPane1.setViewportView(categoryProductTable);
        loadProdcateSubCategoryTableDetails();
        productCodeJBox.setModel(new DefaultComboBoxModel(new Vector(categoryProducts)));
        UIUtils.setTableSettings(categoryProductTable);

        jButton7.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit_clear.png"))); // NOI18N
        jButton7.setText("Clear");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erase.png"))); // NOI18N
        jButton8.setText("Delete");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(164, 164, 164)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(41, 41, 41)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(textFieldProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textFieldProductCode, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(productTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1453, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldProductCode, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(productTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(71, 71, 71)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Product Details", jPanel2);

        jPanel3.setBackground(java.awt.SystemColor.window);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel4.setText("Product Code");

        productCodeJBox.setRenderer(new BasicComboBoxRenderer(){
            @Override
            public java.awt.Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if(value!=null && value instanceof CategoryProduct){
                    CategoryProduct categoryProduct=(CategoryProduct)value;
                    setText(categoryProduct.getProductCode());
                }
                return this;
            }

        });
        productCodeJBox.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        productCodeJBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                productCodeJBoxItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel5.setText("Product Name");

        textFieldCateProductName.setEditable(false);
        textFieldCateProductName.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldCateProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldCateProductNameActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel6.setText("Unit Price");

        textFieldUnitPrice.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldUnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldUnitPriceActionPerformed(evt);
            }
        });
        textFieldUnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldUnitPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldUnitPriceKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel7.setText("Sales Price");

        textFieldSalePrice.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldSalePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSalePriceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel8.setText("Total Quatity");

        textFieldTotalQty.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldTotalQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldTotalQtyActionPerformed(evt);
            }
        });
        textFieldTotalQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldTotalQtyKeyReleased(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel9.setText("Purchase Amount");

        textFieldPurchaseAmt.setEditable(false);
        textFieldPurchaseAmt.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        textFieldPurchaseAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldPurchaseAmtActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel10.setText("Date");

        jButton9.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit_clear.png"))); // NOI18N
        jButton9.setText("Clear");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        jButton10.setText("Save");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cnr_update.png"))); // NOI18N
        jButton11.setText("Update");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erase.png"))); // NOI18N
        jButton12.setText("Delete");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jtableProductEntry.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtableProductEntry.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jtableProductEntry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Product Code", "Product Name", "Entry Date", "Unit Price", "Sales Price", "Total Quantity", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtableProductEntry.setRowHeight(45);
        jtableProductEntry.getColumn ("Product Code").setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public java.awt.Component getTableCellRendererComponent
            (JTable table, Object value
                , boolean isSelected, boolean hasFocus, int row, int column

            ) {
                if (value instanceof ProductEntry) {
                    ProductEntry productEntry = (ProductEntry) value;
                    CategoryProduct categoryProduct=productEntry.getCategoryProduct();
                    setText(categoryProduct.getProductCode());
                    Font font = UIManager.getFont("TableHeader.font");
                    font = font.deriveFont(21f);
                    setFont(font);
                }
                return this;
            }

        });
        jtableProductEntry.getColumn ("Product Name").setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public java.awt.Component getTableCellRendererComponent
            (JTable table, Object value
                , boolean isSelected, boolean hasFocus, int row, int column

            ) {
                if (value instanceof ProductEntry) {
                    ProductEntry productEntry = (ProductEntry) value;
                    CategoryProduct categoryProduct=productEntry.getCategoryProduct();
                    setText(categoryProduct.getProductName());
                    Font font = UIManager.getFont("TableHeader.font");
                    font = font.deriveFont(21f);
                    setFont(font);
                }
                return this;
            }

        });
        loadProductEntryDetails();
        jtableProductEntry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtableProductEntryMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jtableProductEntryMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtableProductEntryMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jtableProductEntry);
        UIUtils.setTableSettings(jtableProductEntry);

        textFieldEntryDate.setDateFormatString("dd/MMM/yyy");
        textFieldEntryDate.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldCateProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldTotalQty, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                                    .addComponent(textFieldUnitPrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(textFieldSalePrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                                    .addComponent(textFieldPurchaseAmt)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(productCodeJBox, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldEntryDate, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)))))
                .addContainerGap(240, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(productCodeJBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addComponent(textFieldEntryDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textFieldCateProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(textFieldUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldSalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textFieldTotalQty, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(textFieldPurchaseAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Product Entry", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) productCateTable.getModel();
        model.addRow(new Object[]{null, null});
        productCateTable.scrollRectToVisible(productCateTable.getCellRect(model.getRowCount() - 1, 0, true));
        prodCate.add(model.getRowCount() - 1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Boolean flag = Boolean.FALSE;
        try {
            DefaultTableModel model = getTableModel(productCateTable);
            if (prodCate != null && !prodCate.isEmpty()) {
                for (Integer rowIndex : prodCate) {
                    flag = updateProductionCateDetails(model, rowIndex);
                }
                prodCate.clear();
                if(flag){
                    dialogBox(ServiceConstant.ACTION_SAVE);
                }
            } else {
                Integer selectedIndex = productCateTable.getSelectedRow();
                if(updateProductionCateDetails(model, selectedIndex)){
                    dialogBox(ServiceConstant.ACTION_UPDATE);
                }
            }
        }catch (Exception ex) {
            LOGGER.error("Exception{}" + ex.getMessage(), ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private Boolean updateProductionCateDetails(DefaultTableModel model, Integer rowIndex) {
        Boolean flag = Boolean.FALSE;
        Category category = new Category();
        category.setCateId((Long) model.getValueAt(rowIndex, 0));
        category.setCateName(model.getValueAt(rowIndex, 1).toString());
        if (category.getCateId() == null) {
            category = transactionService.save(category);
            model.setValueAt(category.getCateId(), rowIndex, 0);
            flag = Boolean.TRUE;
        } else {
            flag = transactionService.saveOrupdateCategory(category);
            productTypeBox.removeItem(category);
            categoryProductTableBox.removeItem(category);
            jtableProductTypeBox.removeItem(category);
        }
        if(flag){
             productTypeBox.addItem(category);
             categoryProductTableBox.addItem(category);
             jtableProductTypeBox.addItem(category);
        }
        return flag;
    }

    private DefaultTableModel getTableModel(JTable jTable) {
        return (DefaultTableModel) jTable.getModel();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Integer selectedIndex = productCateTable.getSelectedRow();
        DefaultTableModel model = getTableModel(productCateTable);
        Long cateId = (Long) model.getValueAt(selectedIndex, 0);
        Category category=new Category();
        category.setCateId(cateId);
        if (transactionService.deleteCategory(cateId)) {
            model.removeRow(selectedIndex);
            productTypeBox.removeItem(category);
            dialogBox(ServiceConstant.ACTION_DELETE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void textFieldProductCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldProductCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldProductCodeActionPerformed

    private void textFieldProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldProductNameActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DefaultTableModel model = (DefaultTableModel)categoryProductTable.getModel();
        CategoryProduct categoryProduct = new CategoryProduct();
        categoryProduct.setProductCode(textFieldProductCode.getText());
        categoryProduct.setProductName(textFieldProductName.getText());
        categoryProduct.setCategory((Category) productTypeBox.getSelectedItem());
        if(categoryProduct.getProductID()==null){
            categoryProduct = transactionService.saveCategoryProd(categoryProduct);
            if(categoryProduct.getProductID()!=null) {
                model.addRow(new Object[]{categoryProduct.getProductID(), categoryProduct.getProductCode(),
                    categoryProduct.getProductName(), categoryProduct.getCategory()});
                productCodeJBox.addItem(categoryProduct);
                dialogBox(ServiceConstant.ACTION_SAVE);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Integer rowIndex = categoryProductTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)categoryProductTable.getModel();
        if (rowIndex != null && rowIndex != -1) {
            CategoryProduct categoryProduct = new CategoryProduct();
            categoryProduct.setProductID((Long) model.getValueAt(rowIndex, 0));
            categoryProduct.setProductCode(model.getValueAt(rowIndex, 1).toString());
            categoryProduct.setProductName(model.getValueAt(rowIndex, 2).toString());
            categoryProduct.setCategory((Category) model.getValueAt(rowIndex, 3));
            if(transactionService.updateCategoryProduct(categoryProduct)) {
                dialogBox(ServiceConstant.ACTION_UPDATE);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        textFieldProductCode.setText(null);
        textFieldProductName.setText(null);
        productTypeBox.setSelectedIndex(0);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Integer rowIndex = categoryProductTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) categoryProductTable.getModel();
        if(rowIndex != null && rowIndex != -1){
            Long productId = (Long) model.getValueAt(rowIndex, 0);
            CategoryProduct categoryProduct=transactionService.findCategoryProdById(productId);
            Boolean flag = transactionService.deleteCategoryProduct(productId);
            if(flag){
                model.removeRow(rowIndex);
                productCodeJBox.removeItem(categoryProduct);
                dialogBox(ServiceConstant.ACTION_DELETE);
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void productTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productTypeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productTypeBoxActionPerformed

    private void textFieldCateProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldCateProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldCateProductNameActionPerformed

    private void textFieldUnitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldUnitPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldUnitPriceActionPerformed

    private void textFieldSalePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSalePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldSalePriceActionPerformed

    private void textFieldTotalQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldTotalQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldTotalQtyActionPerformed

    private void textFieldPurchaseAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldPurchaseAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldPurchaseAmtActionPerformed

    private void productCodeJBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_productCodeJBoxItemStateChanged
       if(evt.getStateChange()==ItemEvent.SELECTED){
         CategoryProduct categoryProduct=(CategoryProduct)evt.getItem();
         textFieldCateProductName.setText("");
         textFieldCateProductName.setText(categoryProduct.getProductName());
         LOGGER.info("cateProductname{}"+categoryProduct.getProductName());
       }
    }//GEN-LAST:event_productCodeJBoxItemStateChanged

    private void textFieldUnitPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldUnitPriceKeyTyped
       
    }//GEN-LAST:event_textFieldUnitPriceKeyTyped

    private void textFieldUnitPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldUnitPriceKeyReleased
        calulatePriceAmt();
    }//GEN-LAST:event_textFieldUnitPriceKeyReleased

    private void textFieldTotalQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldTotalQtyKeyReleased
        calulatePriceAmt();
    }//GEN-LAST:event_textFieldTotalQtyKeyReleased

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
              clearFields(jPanel3);
              rowIndex=-1;
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       try{
           ProductEntry productEntry=new ProductEntry();
           productEntry.setCategoryProduct((CategoryProduct)productCodeJBox.getSelectedItem());
           productEntry.setEntryDate(textFieldEntryDate.getDate());
           productEntry.setUnitPrice(Double.parseDouble(textFieldUnitPrice.getText()));
           productEntry.setSalesPrice(Double.parseDouble(textFieldSalePrice.getText()));
           productEntry.setQuantity(Integer.parseInt(textFieldTotalQty.getText()));
           productEntry.setProdAmount(Double.parseDouble(textFieldPurchaseAmt.getText()));
           productEntry=transactionService.saveProductEntry(productEntry);
           addProductEntry(productEntry,ServiceConstant.ACTION_SAVE);
       }catch(Exception ex){
           LOGGER.error("Exception{}"+ex.getMessage(),ex);
       }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
         try{
           newObject.setCategoryProduct((CategoryProduct)productCodeJBox.getSelectedItem());
           newObject.setEntryDate(textFieldEntryDate.getDate());
           newObject.setUnitPrice(Double.parseDouble(textFieldUnitPrice.getText()));
           newObject.setSalesPrice(Double.parseDouble(textFieldSalePrice.getText()));
           newObject.setQuantity(Integer.parseInt(textFieldTotalQty.getText()));
           newObject.setProdAmount(Double.parseDouble(textFieldPurchaseAmt.getText()));
           if(transactionService.updateProductEntry(newObject)){
               addProductEntry(newObject,ServiceConstant.ACTION_UPDATE);
               rowIndex=-1;
           }
       }catch(Exception ex){
           LOGGER.error("Exception{}"+ex.getMessage(),ex);
       }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        DefaultTableModel model=getTableModel(jtableProductEntry);
        if(rowIndex!=-1){
            Long id=(Long)model.getValueAt(rowIndex,0);
            if(transactionService.deleteProductEntry(id)){
               model.removeRow(rowIndex);
               dialogBox(ServiceConstant.ACTION_DELETE);
               rowIndex=-1;
            }
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jtableProductEntryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableProductEntryMouseEntered
     
    }//GEN-LAST:event_jtableProductEntryMouseEntered

    private void jtableProductEntryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableProductEntryMouseClicked
      
    }//GEN-LAST:event_jtableProductEntryMouseClicked

    private void jtableProductEntryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableProductEntryMousePressed
       rowIndex=jtableProductEntry.getSelectedRow();
       LOGGER.info("RowIndex{}"+rowIndex);
       if(rowIndex!=-1){
           DefaultTableModel model=getTableModel(jtableProductEntry);
           ProductEntry productEntry=(ProductEntry)model.getValueAt(rowIndex,1);
           CategoryProduct categoryProduct=productEntry.getCategoryProduct();
           LOGGER.info("Selected Date{}"+productEntry.getDate());
           newObject=productEntry;
           productCodeJBox.setSelectedItem(categoryProduct);
           textFieldEntryDate.setDate(productEntry.getEntryDate());
           textFieldUnitPrice.setText(productEntry.getUnitPrice()!=null?productEntry.getUnitPrice().toString():"0");
           textFieldSalePrice.setText(productEntry.getSalesPrice()!=null?productEntry.getSalesPrice().toString():"0");
           textFieldTotalQty.setText(productEntry.getQuantity()!=null?productEntry.getQuantity().toString():"0");
           textFieldPurchaseAmt.setText(productEntry.getProdAmount()!=null?productEntry.getProdAmount().toString():"0");
         }
    }//GEN-LAST:event_jtableProductEntryMousePressed
    private void calulatePriceAmt(){
        String unitValue=textFieldUnitPrice.getText(); 
        String qtyValue=textFieldTotalQty.getText();
        Double unitPrice=!StringUtils.isEmpty(unitValue)?Double.parseDouble(unitValue):0D;
        Integer qty=!StringUtils.isEmpty(qtyValue)?Integer.parseInt(qtyValue):0;
        Double totalAmt=unitPrice*qty;
        textFieldPurchaseAmt.setText(totalAmt.toString());
    }
    private void setTableSettings() {
        //Font font = UIManager.getFont("TableHeader.font");
        Font font =new FontUIResource("SansSerif", Font.PLAIN,24);
        //UIManager.put("TableHeader.font", font);
        //UIManager.put("ComboBox.font", font);
        //UIManager.put("InternalFrame.titleFont", font);
        UIManager.put("TableHeader.font",font);
    }
    private void addProductEntry(ProductEntry productEntry,Integer action){
         Object[] dataObjects=new Object[]{
                  productEntry.getId(),productEntry,
                  productEntry,productEntry.getEntryDate(),
                  productEntry.getUnitPrice(),productEntry.getSalesPrice(),productEntry.getQuantity(),
                  productEntry.getProdAmount()
              };
         DefaultTableModel model=getTableModel(jtableProductEntry);
         if(ServiceConstant.ACTION_SAVE.equals(action)){
            model.addRow(new Object[]{
                  productEntry.getId(),productEntry,
                  productEntry,productEntry.getEntryDate(),
                  productEntry.getUnitPrice(),productEntry.getSalesPrice(),productEntry.getQuantity(),
                  productEntry.getProdAmount()
              });
             dialogBox(ServiceConstant.ACTION_SAVE);
          }else if(ServiceConstant.ACTION_UPDATE.equals(action)){
            for(int col=1;col<model.getColumnCount();col++){
                model.setValueAt(dataObjects[col],rowIndex,col);
            }
            dialogBox(ServiceConstant.ACTION_UPDATE);
          }else{
              model.addRow(new Object[]{
                  productEntry.getId(),productEntry,
                  productEntry,productEntry.getEntryDate(),
                  productEntry.getUnitPrice(),productEntry.getSalesPrice(),productEntry.getQuantity(),
                  productEntry.getProdAmount()
              });
          }
    }
    private void dialogBox(Integer action){
       if(ServiceConstant.ACTION_SAVE.equals(action)){
         JOptionPane.showMessageDialog(this, ServiceConstant.SUCCESS_MSG, ServiceConstant.RESULT_SUCCESS,
                        JOptionPane.INFORMATION_MESSAGE);
       }else if(ServiceConstant.ACTION_UPDATE.equals(action)){
        JOptionPane.showMessageDialog(this, ServiceConstant.UPDATE_MSG, ServiceConstant.RESULT_SUCCESS,
                        JOptionPane.INFORMATION_MESSAGE);   
       }else if(ServiceConstant.ACTION_DELETE.equals(action)){
        JOptionPane.showMessageDialog(this, ServiceConstant.DETLE_MSG, ServiceConstant.RESULT_SUCCESS,
                        JOptionPane.INFORMATION_MESSAGE);   
       }
    }
    private void setTableSettings(JTable table, Integer colIndex, Integer width) {
        TableColumnModel tableColumnModel = table.getColumnModel();
        TableColumn column = tableColumnModel.getColumn(colIndex);
        column.setPreferredWidth(width);

    }
    private void loadProductTypeDetails(){
        categorys=transactionService.getCategory();
    }
    private void loadProductCategoryDetails() {
        try {
            LOGGER.info("**************Loading ProductCategorydetails**************");
            java.util.List<Category> categorys = transactionService.getCategory();
            DefaultTableModel model = (DefaultTableModel) productCateTable.getModel();
            if (categorys != null && !categorys.isEmpty()) {
                for (Category category : categorys) {
                    model.addRow(new Object[]{category.getCateId(), category.getCateName()});
                }
            }
        } catch (Exception ex) {
            LOGGER.error("Exception{}" + ex.getMessage(), ex);
        }
    }
    private void loadProdcateSubCategoryTableDetails(){
         try{
            categoryProducts = transactionService.getCategoryProducts();
            DefaultTableModel model = (DefaultTableModel) categoryProductTable.getModel();
            if (categoryProducts != null && !categoryProducts.isEmpty()) {
                for (CategoryProduct categoryProduct : categoryProducts) {
                    model.addRow(new Object[]{
                        categoryProduct.getProductID(), categoryProduct.getProductCode(),
                        categoryProduct.getProductName(), categoryProduct.getCategory()
                    });
                }
                CategoryProduct product=new CategoryProduct();
                product.setProductCode(ServiceConstant.SELECTED);
                categoryProducts.add(0,product);
            }
        }catch(Exception ex) {
            LOGGER.error("Exception{}" + ex.getMessage(), ex);
        }
    }
    private void loadProductEntryDetails(){
        LOGGER.info("Loading Product Details");
        List<ProductEntry> productEntrys=transactionService.findAllProductEntries();
        DefaultTableModel model=getTableModel(jtableProductEntry);
        
        for(Integer row=1;row<model.getRowCount();row++){
            model.removeRow(row-1);
        }
        if(!StringUtils.isEmpty(productEntrys)){
            for(ProductEntry productEntry:productEntrys){
                addProductEntry(productEntry,0);
            }
        }
    }
    private void clearFields(java.awt.Component component){
        if(component instanceof JPanel){
            for(java.awt.Component comp:((JPanel)component).getComponents()){
                 if(comp instanceof  JTextField){
                     ((JTextField)comp).setText("");
                 }else if(comp instanceof JComboBox){
                     ((JComboBox)comp).setSelectedIndex(0);
                 }
            }
        }
    }
    private List<Integer> prodCate = new ArrayList<Integer>();
    private List<CategoryProduct> categoryProducts=null;
    private List<Category> categorys=null;
    private javax.swing.JComboBox categoryProductTableBox;
    private Integer rowIndex=-1;
    private ProductEntry newObject=null;
    private JComboBox jtableProductTypeBox=null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable categoryProductTable;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane3;
    @Autowired
    private TransactionService transactionService;
    private javax.swing.JTable jtableProductEntry;
    private javax.swing.JTable productCateTable;
    private javax.swing.JComboBox productCodeJBox;
    private javax.swing.JComboBox productTypeBox;
    private javax.swing.JTextField textFieldCateProductName;
    private com.toedter.calendar.JDateChooser textFieldEntryDate;
    private javax.swing.JTextField textFieldProductCode;
    private javax.swing.JTextField textFieldProductName;
    private javax.swing.JTextField textFieldPurchaseAmt;
    private javax.swing.JTextField textFieldSalePrice;
    private javax.swing.JTextField textFieldTotalQty;
    private javax.swing.JTextField textFieldUnitPrice;
    // End of variables declaration//GEN-END:variables
}
